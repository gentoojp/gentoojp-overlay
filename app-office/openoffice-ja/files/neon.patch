--- /work/ooo/gnome-ooo/openoffice/build/OOO_1_1_1/neon/neon.patch	2004-03-19 17:32:52.000000000 -0500
+++ neon/neon.patch	2004-04-05 12:38:42.000000000 -0400
@@ -135,8 +134,8 @@
 ! #define read _read
 ! 
 ! #endif
-*** misc/neon-0.23.5/src/makefile.mk	Tue Oct 22 17:55:55 2002
---- misc/build/neon-0.23.5/src/makefile.mk	Tue Oct 22 17:35:49 2002
+*** misc/neon-0.23.5/src/makefile.mk	2004-04-05 12:38:37.706437510 -0400
+--- misc/build/neon-0.23.5/src/makefile.mk	2004-04-05 12:21:47.810143789 -0400
 ***************
 *** 1 ****
 ! dummy
@@ -190,8 +189,173 @@
 ! # --- Targets ------------------------------------------------------
 ! 
 ! .INCLUDE :  target.mk
-*** misc/neon-0.23.5/src/ne_props.c	Sun Jul 14 13:18:06 2002
---- misc/build/neon-0.23.5/src/ne_props.c	Tue Oct 22 17:35:49 2002
+*** misc/neon-0.23.5/src/ne_207.c	2002-06-23 10:04:36.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_207.c	2004-04-05 12:38:18.221460697 -0400
+***************
+*** 1,6 ****
+  /* 
+     WebDAV 207 multi-status response handling
+!    Copyright (C) 1999-2002, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+--- 1,6 ----
+  /* 
+     WebDAV 207 multi-status response handling
+!    Copyright (C) 1999-2004, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+***************
+*** 358,369 ****
+  	if (ne_get_status(req)->code == 207) {
+  	    if (!ne_xml_valid(p)) { 
+  		/* The parse was invalid */
+! 		ne_set_error(sess, ne_xml_get_error(p));
+  		ret = NE_ERROR;
+  	    } else if (ctx.is_error) {
+  		/* If we've actually got any error information
+  		 * from the 207, then set that as the error */
+! 		ne_set_error(sess, ctx.buf->data);
+  		ret = NE_ERROR;
+  	    }
+  	} else if (ne_get_status(req)->klass != 2) {
+--- 358,369 ----
+  	if (ne_get_status(req)->code == 207) {
+  	    if (!ne_xml_valid(p)) { 
+  		/* The parse was invalid */
+! 		ne_set_error(sess, "%s", ne_xml_get_error(p));
+  		ret = NE_ERROR;
+  	    } else if (ctx.is_error) {
+  		/* If we've actually got any error information
+  		 * from the 207, then set that as the error */
+! 		ne_set_error(sess, "%s", ctx.buf->data);
+  		ret = NE_ERROR;
+  	    }
+  	} else if (ne_get_status(req)->klass != 2) {
+*** misc/neon-0.23.5/src/ne_auth.c	2002-10-07 16:33:17.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_auth.c	2004-04-05 12:38:18.223460387 -0400
+***************
+*** 908,914 ****
+      if (areq->auth_info_hdr != NULL && 
+  	verify_response(areq, sess, areq->auth_info_hdr)) {
+  	NE_DEBUG(NE_DBG_HTTPAUTH, "Response authentication invalid.\n");
+! 	ne_set_error(sess->sess, _(sess->spec->fail_msg));
+  	ret = NE_ERROR;
+      } else if (status->code == sess->spec->status_code && 
+  	       areq->auth_hdr != NULL) {
+--- 908,914 ----
+      if (areq->auth_info_hdr != NULL && 
+  	verify_response(areq, sess, areq->auth_info_hdr)) {
+  	NE_DEBUG(NE_DBG_HTTPAUTH, "Response authentication invalid.\n");
+! 	ne_set_error(sess->sess, "%s", _(sess->spec->fail_msg));
+  	ret = NE_ERROR;
+      } else if (status->code == sess->spec->status_code && 
+  	       areq->auth_hdr != NULL) {
+*** misc/neon-0.23.5/src/ne_compress.c	2002-09-18 16:50:34.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_compress.c	2004-04-05 12:38:18.225460077 -0400
+***************
+*** 1,6 ****
+  /* 
+     Handling of compressed HTTP responses
+!    Copyright (C) 2001-2002, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+--- 1,6 ----
+  /* 
+     Handling of compressed HTTP responses
+!    Copyright (C) 2001-2004, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+***************
+*** 252,258 ****
+  	     * doesn't work, and this does, but I have no idea why..
+  	     * Google showed me the way. */
+  	    if (inflateInit2(&ctx->zstr, -MAX_WBITS) != Z_OK) {
+! 		ne_set_error(ctx->session, ctx->zstr.msg);
+  		ctx->state = NE_Z_ERROR;
+  		return;
+  	    }
+--- 252,258 ----
+  	     * doesn't work, and this does, but I have no idea why..
+  	     * Google showed me the way. */
+  	    if (inflateInit2(&ctx->zstr, -MAX_WBITS) != Z_OK) {
+! 		ne_set_error(ctx->session, "%s", ctx->zstr.msg);
+  		ctx->state = NE_Z_ERROR;
+  		return;
+  	    }
+*** misc/neon-0.23.5/src/ne_locks.c	2002-08-05 16:10:53.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_locks.c	2004-04-05 12:38:18.227459766 -0400
+***************
+*** 723,729 ****
+  	}
+  	else if (parse_failed) {
+  	    ret = NE_ERROR;
+! 	    ne_set_error(sess, ne_xml_get_error(parser));
+  	}
+  	else if (ne_get_status(req)->code == 207) {
+  	    ret = NE_ERROR;
+--- 723,729 ----
+  	}
+  	else if (parse_failed) {
+  	    ret = NE_ERROR;
+! 	    ne_set_error(sess, "%s", ne_xml_get_error(parser));
+  	}
+  	else if (ne_get_status(req)->code == 207) {
+  	    ret = NE_ERROR;
+***************
+*** 792,798 ****
+      if (ret == NE_OK && ne_get_status(req)->klass == 2) {
+  	if (parse_failed) {
+  	    ret = NE_ERROR;
+! 	    ne_set_error(sess, ne_xml_get_error(parser));
+  	}
+  	else if (ne_get_status(req)->code == 207) {
+  	    ret = NE_ERROR;
+--- 792,798 ----
+      if (ret == NE_OK && ne_get_status(req)->klass == 2) {
+  	if (parse_failed) {
+  	    ret = NE_ERROR;
+! 	    ne_set_error(sess, "%s", ne_xml_get_error(parser));
+  	}
+  	else if (ne_get_status(req)->code == 207) {
+  	    ret = NE_ERROR;
+*** misc/neon-0.23.5/src/ne_props.c	2002-07-14 07:18:06.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_props.c	2004-04-05 12:38:27.458027606 -0400
+***************
+*** 1,6 ****
+  /* 
+     WebDAV property manipulation
+!    Copyright (C) 2000-2002, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+--- 1,6 ----
+  /* 
+     WebDAV property manipulation
+!    Copyright (C) 2000-2004, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+***************
+*** 136,142 ****
+      if (ret == NE_OK && ne_get_status(req)->klass != 2) {
+  	ret = NE_ERROR;
+      } else if (!ne_xml_valid(handler->parser)) {
+! 	ne_set_error(handler->sess, ne_xml_get_error(handler->parser));
+  	ret = NE_ERROR;
+      }
+  
+--- 136,142 ----
+      if (ret == NE_OK && ne_get_status(req)->klass != 2) {
+  	ret = NE_ERROR;
+      } else if (!ne_xml_valid(handler->parser)) {
+! 	ne_set_error(handler->sess, "%s", ne_xml_get_error(handler->parser));
+  	ret = NE_ERROR;
+      }
+  
 ***************
 *** 457,462 ****
 --- 457,465 ----
@@ -204,3 +368,37 @@
       /* If we get a non-2xx response back here, we wipe the value for
        * each of the properties in this propstat, so the caller knows to
        * look at the status instead. It's annoying, since for each prop
+*** misc/neon-0.23.5/src/ne_xml.c	2002-10-08 15:11:31.000000000 -0400
+--- misc/build/neon-0.23.5/src/ne_xml.c	2004-04-05 12:38:18.232458991 -0400
+***************
+*** 1,6 ****
+  /* 
+     Higher Level Interface to XML Parsers.
+!    Copyright (C) 1999-2002, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+--- 1,6 ----
+  /* 
+     Higher Level Interface to XML Parsers.
+!    Copyright (C) 1999-2004, Joe Orton <joe@manyfish.co.uk>
+  
+     This library is free software; you can redistribute it and/or
+     modify it under the terms of the GNU Library General Public
+***************
+*** 860,866 ****
+  
+  void ne_xml_set_error(ne_xml_parser *p, const char *msg)
+  {
+!     ne_snprintf(p->error, ERR_SIZE, msg);
+  }
+  
+  #ifdef HAVE_LIBXML
+--- 860,866 ----
+  
+  void ne_xml_set_error(ne_xml_parser *p, const char *msg)
+  {
+!     ne_snprintf(p->error, ERR_SIZE, "%s", msg);
+  }
+  
+  #ifdef HAVE_LIBXML
