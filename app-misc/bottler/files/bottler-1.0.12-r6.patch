diff -Naur bottler-1.0.12/lib/bottler.py bottler-1.0.12-gentoo/lib/bottler.py
--- bottler-1.0.12/lib/bottler.py	2002-03-06 15:12:38.000000000 +0900
+++ bottler-1.0.12-gentoo/lib/bottler.py	2003-12-11 06:19:24.638422144 +0900
@@ -12,6 +12,7 @@
 
 from Tkinter import *
 from Dialog  import Dialog
+from types   import UnicodeType, StringType
 
 import fcntl
 import getopt
@@ -21,6 +22,8 @@
 import string
 import StringIO
 import time
+import re
+import tkFont
 
 from bottlelib import BottleClient, BottleClientError
 
@@ -37,6 +40,103 @@
 VOTE = "Vote"
 AGREE = "Agree"
 
+def toUTF8(str, encoding="euc-jp"):
+    if type(str) == UnicodeType:
+        return str.encode("utf8")
+    return unicode(str, encoding).encode("utf8")
+
+def toEUC(str, encoding="utf8"):
+    if type(str) == UnicodeType:
+        try:
+            data = str.encode("euc-jp")
+        except UnicodeError:
+            data = unicode(str.encode("raw-unicode-escape"), "euc-jp")
+        return data
+    else:
+        data = unicode(str, encoding)
+        try:
+            data = data.encode("euc-jp")
+        except UnicodeError:
+            data = unicode(data.encode("raw-unicode-escape"), "euc-jp")
+        return data
+
+class FontManager:
+    FILE = "font.cfg"
+    def __init__(self, app, kanjicode):
+        if kanjicode not in ["EUC-JP", "Shift_JIS", "ISO-2022-JP"]:
+            raise ValueError, "unsupported kanji code (%s)" % str(kanjicode)
+        self.han2zen = kanjilib.get_han2zen_converter(kanjicode)
+        self.logdir = open_bottlecase()
+        self.app = app
+        self.fonts = []
+        self.DEFAULT = None
+        # lock file
+        # self.lockfile = open(os.path.join(self.logdir, ".fontlock"), "w")
+        #try:
+        #    fcntl.flock(self.lockfile.fileno(), fcntl.LOCK_EX|fcntl.LOCK_NB)
+        #except IOError:
+        #    self.disabled = 1
+        #    return
+        #self.disabled = 0
+        # load file
+        self.dbpath = os.path.join(self.logdir, self.FILE)
+        self.load_file()
+    def load_file(self):
+        try:
+            file = open(self.dbpath)
+        except IOError:
+            pass
+        else:
+            while 1:
+                line = file.readline()
+                line = re.split("\s*#\s*", line)[0]
+                if not line:
+                    break
+                if line[-1] == '\n':
+                    line = line[:-1] # chomp
+                try:
+                    aliases = re.split('\s*:\s*', line)
+                except AttributeError:
+                    pass
+                else:
+                    self.fonts.append({toUTF8(aliases[0]): aliases[1]})
+    def find_font(self):
+        fonts = tkFont.names()
+        if fonts:
+            return tkFont.Font(font=fonts[0])
+        if self.DEFAULT:
+            return tkFont.Font(family=self.DEFAULT, size=10, weight=NORMAL, slant="roman", underline=0, overstrike=0, name=self.DEFAULT)
+        for reg in ["ms", "aqua", "kochi", "mikachan", "marumoji", "gothic", "mincho"]:
+            reg = re.compile(reg, re.IGNORECASE)
+            for fm in tkFont.families():
+                if reg.match(fm):
+                    self.DEFAULT = fm
+                    return tkFont.Font(family=fm, size=10, weight=NORMAL, slant="roman", underline=0, overstrike=0, name=fm)
+        self.DEFAULT = "fixed"
+        return tkFont.Font(family="fixed", size=16, weight=NORMAL, slant="roman", underline=0, overstrike=0, name="fixed")
+    def changeFont(self, font):
+        for i in range(len(self.app.all_item)):
+            self.app.all_item[i].config(font=font)
+    def fontlist(self):
+        if not self.fonts:
+            self.fonts = [{"Fixed": "-*-fixed-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Marumoji": "-*-marumoji-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Aqua": "-*-aquafont-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Aqua(P)": "-*-aqua_pfont-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Mikachan": "-*-mikachan-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Mikachan(P)": "-*-mikachan P-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Mikachan(PB)": "-*-mikachan PB-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Mikachan(PS)": "-*-mikachan PS-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Mincho": "-*-mincho-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Minsho(Kochi)": "-*-kochi mincho-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Mincho(Ricoh)": "-ricoh-ms mincho-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Gothic": "-*-gothic-medium-r-normal-*-*-*-*-*-*-*-jisx0208.1983-0"},
+                          {"Gothic(Kochi)": "-*-kochi gothic-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Gothic(Ricoh)": "-ricoh-ms gothic-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Gothic(Ricoh,P)": "-ricoh-ms pgothic-medium-r-normal-*-*-*-*-*-*-*-*-*"},
+                          {"Gothic(Ricoh,UI)": "-ricoh-ms ui gothic-medium-r-normal-*-*-*-*-*-*-*-*-*"}]
+        return self.fonts
+
 class Bottler(BottleClient):
     def __init__(self, app, kanjicode):
         if kanjicode not in ["EUC-JP", "Shift_JIS", "ISO-2022-JP"]:
@@ -49,7 +149,18 @@
             return
         # dispatch SSTP message to local SSTP server
         if self.app.forward.get():
-            BottleClient.handle_sstp_message(self, message, unicast, forced)
+            if not self.app.acceptAll.get():
+                ifghost = ""
+                for cmd in message.split("\r\n"):
+                    if cmd[:9] == "IfGhost: ":
+                        ifghost = cmd[9:]
+                        break
+                if self.app.sakuraname == toEUC(ifghost, "shift_jis") or \
+                       self.app.target_ghost.get() == toUTF8(ifghost, "shift_jis") or \
+                       self.app.target_ghost.get() == Application.DEFAULT_TARGET:
+                    BottleClient.handle_sstp_message(self, message, unicast, forced)
+            else:
+                BottleClient.handle_sstp_message(self, message, unicast, forced)
         # parse SSTP message
         file = StringIO.StringIO(message)
         request = file.readline()
@@ -75,6 +186,9 @@
         self.app.log_message(mid, channel, script)
         # ring bell
         self.app.bell(channel, script)
+        # log: auto update view
+        if self.app.log_window and self.app.log_window.auto_var.get():
+            self.app.log_window.update_view()
     def handle_dialog_message(self, message):
         self.app.monitor_clear()
         self.app.monitor_insert(message)
@@ -92,7 +206,9 @@
         self.app.close_channel(channel)
 
 class ChannelDialog(Toplevel):
-    def __init__(self, master, channels):
+    DEFAULT_FONT = None
+    def __init__(self, app, master, channels):
+        DEFAULT_FONT = app.fontmanager.find_font()
         Toplevel.__init__(self, master)
         self.transient(master)
         self.title("Bottler: Select Channels")
@@ -101,14 +217,14 @@
         self.protocol('WM_DELETE_WINDOW', self.cancel)
         frame = Frame(self)
         frame.pack(side=BOTTOM, fill=X)
-        Button(frame, text="Join", command=self.ok).pack(side=LEFT)
-        Button(frame, text="Cancel", command=self.cancel).pack(side=RIGHT)
-        self.text = Text(self, width=40, height=5)
+        Button(frame, text="Join", command=self.ok, font=DEFAULT_FONT).pack(side=LEFT)
+        Button(frame, text="Cancel", command=self.cancel, font=DEFAULT_FONT).pack(side=RIGHT)
+        self.text = Text(self, width=40, height=5, font=DEFAULT_FONT)
         self.text.pack(side=BOTTOM, fill=BOTH, expand=1)
         self.channels = channels
         self.selection = []
         for n in range(len(channels)):
-            cb = Checkbutton(self, text=channels[n]["name"], anchor=W)
+            cb = Checkbutton(self, text=toUTF8(channels[n]["name"]), font=DEFAULT_FONT, anchor=W)
             cb.pack(side=TOP, fill=X)
             cb.bind("<Button-1>", lambda e, n=n, f=self.selected: f(n))
     def selected(self, n):
@@ -119,10 +235,10 @@
             self.selection.sort()
         self.text.config(state=NORMAL)
         self.text.delete("1.0", END)
-        self.text.insert(END, "ゴースト: ")
-        self.text.insert(END, self.channels[n]["ghost"])
+        self.text.insert(END, toUTF8("ゴースト: "))
+        self.text.insert(END, toUTF8(self.channels[n]["ghost"]))
         self.text.insert(END, "\n")
-        self.text.insert(END, self.channels[n]["info"])
+        self.text.insert(END, toUTF8(self.channels[n]["info"]))
         self.text.config(state=DISABLED)
     def go(self):
         try:
@@ -138,11 +254,13 @@
         self.selection = None
         self.quit()
 
-def ScrolledText(parent, width=80, height=25):
+def ScrolledText(parent, width=80, height=25, font=None):
+    if font == None:
+        font = FontManager.find_font()
     frame = Frame(parent)
     sb = Scrollbar(frame, orient=VERTICAL)
     sb.pack(side=RIGHT, fill=Y)
-    text = Text(frame, width=width, height=height, yscrollcommand=sb.set)
+    text = Text(frame, width=width, height=height, yscrollcommand=sb.set, font=font)
     text.pack(side=LEFT, fill=BOTH, expand=1)
     sb.config(command=text.yview)
     return frame, text
@@ -169,7 +287,6 @@
     0xd0, 0x0f, 0xd0, 0x0f, 0xd0, 0x0f, 0xd0, 0x0f,
     0xd0, 0x0f, 0xd0, 0x0f, 0xd0, 0x0f, 0xf0, 0x0f};
 """
-
 class BottleIcon(Label):
     def __init__(self, master, life, color="black"):
         self.life = life
@@ -188,6 +305,7 @@
 
 class Application:
     DEFAULT_TARGET = "default"
+    DEFAULT_FONT = None
     def __init__(self, port=9801):
         self.host = ""
         self.port = port
@@ -201,22 +319,32 @@
         menubar.pack(side=TOP, fill=X)
         buttonbar = Frame(self.window)
         buttonbar.pack(side=TOP, fill=X)
-        Button(buttonbar, text="Check", command=self.check).pack(side=LEFT)
-        Button(buttonbar, text="Test", command=self.test).pack(side=LEFT)
-        self.send_button = Button(buttonbar, text="Send", command=self.send)
-        self.send_button.pack(side=LEFT)
-        Label(buttonbar, text="Channel:").pack(side=LEFT)
+        self.fontmanager = FontManager(self, KANJICODE)
+        DEFAULT_FONT = self.fontmanager.find_font()
+        self.all_item = [] # all items which have font
+        self.all_item.append(Button(buttonbar, text="Check", command=self.check, font=DEFAULT_FONT))
+        self.all_item.append(Button(buttonbar, text="Test", command=self.test, font=DEFAULT_FONT))
+        self.send_button = Button(buttonbar, text="Send", command=self.send, font=DEFAULT_FONT)
+        self.all_item.append(self.send_button)
+        #self.send_button.pack(side=LEFT)
+        self.all_item.append(Label(buttonbar, text="Channel:", font=DEFAULT_FONT))
         self.channel = StringVar(self.window)
-        Label(buttonbar, textvariable=self.channel).pack(side=LEFT)
-        Label(buttonbar, text="Users:").pack(side=LEFT)
-        self.users = Label(buttonbar)
-        self.users.pack(side=LEFT)
+        self.all_item.append(Label(buttonbar, textvariable=self.channel, font=DEFAULT_FONT))
+        self.channel_ghost = StringVar(self.window)
+        self.target_font = StringVar(self.window)
+        self.all_item.append(Label(buttonbar, textvariable=self.channel_ghost, font=DEFAULT_FONT))
+        self.all_item.append(Label(buttonbar, text="Users:", font=DEFAULT_FONT))
+        self.users = Label(buttonbar, font=DEFAULT_FONT)
+        self.all_item.append(self.users)
+        #self.users.pack(side=LEFT)
         self.bottle_icon = BottleIcon(buttonbar, 30)
         self.bottle_icon.pack(side=RIGHT, padx=2)
         self.target_ghost = StringVar(self.window)
-        frame, self.monitor = ScrolledText(self.window, height=5)
+        frame, self.monitor = ScrolledText(self.window, height=5, font=DEFAULT_FONT)
+        self.all_item.append(self.monitor)
         frame.pack(side=BOTTOM, fill=X)
-        frame, self.editor = ScrolledText(self.window, height=12)
+        frame, self.editor = ScrolledText(self.window, height=12, font=DEFAULT_FONT)
+        self.all_item.append(self.editor)
         frame.pack(side=BOTTOM, fill=BOTH, expand=1)
         self.monitor.config(state=DISABLED)
         self.editor.focus_set()
@@ -237,12 +365,15 @@
                          ("c", "Clear All", self.edit_clear_all)]),
             ("Channel", []),
             ("Ghost", []),
+            ("Font", []),
             ("Window",  [("c", "Logs",      self.open_logs),
                          ("c", "Phrases",   self.open_phrases)]),
             ("Help",    [("c", "About...",  self.about)])]:
-            menubutton = Menubutton(menubar, text=text)
-            menubutton.pack(side=LEFT)
-            menu = Menu(menubutton, tearoff=0)
+            menubutton = Menubutton(menubar, text=text, font=DEFAULT_FONT)
+            self.all_item.append(menubutton)
+            #menubutton.pack(side=LEFT)
+            menu = Menu(menubutton, tearoff=0, font=DEFAULT_FONT)
+            self.all_item.append(menu)
             menubutton.config(menu=menu)
             for item in itemlist:
                 if item[0] == "c":
@@ -250,77 +381,85 @@
                 elif item[0] == "s":
                     menu.add_separator()
             self.menubar.append((menu, menubutton))
-        menubutton.pack(side=RIGHT) # Help
+        self.build_font()
+        #menubutton.pack(side=RIGHT) # Help
         # popup menus for editor
-        self.command_menu = Menu(title="Shortcuts")
-        for item in [("m", "セッション", [
-                          ("タイムクリティカル", self.insert_t),
-                          ("クイック",           self.insert_q),
-                          ("シンクロナイズド",   self.insert_s)]),
+        self.command_menu = Menu(title="Shortcuts", font=DEFAULT_FONT)
+        self.all_item.append(self.command_menu)
+        for item in [("m", toUTF8("セッション"), [
+                          (toUTF8("タイムクリティカル"), self.insert_t),
+                          (toUTF8("クイック"),           self.insert_q),
+                          (toUTF8("シンクロナイズド"),   self.insert_s)]),
                      ("s",),
-                     ("c", "さくら", self.insert_h),
-                     ("m", "表情", [("[0] 素",         self.insert_s0),
-                                    ("[1] 照れ",       self.insert_s1),
-                                    ("[2] 驚き",       self.insert_s2),
-                                    ("[3] 不安",       self.insert_s3),
-                                    ("[4] 落ち込み",   self.insert_s4),
-                                    ("[5] 微笑み",     self.insert_s5),
-                                    ("[6] 目閉じ",     self.insert_s6),
-                                    ("[7] 怒り",       self.insert_s7),
-                                    ("[8] 冷笑",       self.insert_s8),
-                                    ("[20] つくり看板", self.insert_s20),
-                                    ("[25] 歌",         self.insert_s25)]),
+                     ("c", toUTF8("さくら"), self.insert_h),
+                     ("m", toUTF8("表情"), [(toUTF8("[0] 素"),         self.insert_s0),
+                                    (toUTF8("[1] 照れ"),       self.insert_s1),
+                                    (toUTF8("[2] 驚き"),       self.insert_s2),
+                                    (toUTF8("[3] 不安"),       self.insert_s3),
+                                    (toUTF8("[4] 落ち込み"),   self.insert_s4),
+                                    (toUTF8("[5] 微笑み"),     self.insert_s5),
+                                    (toUTF8("[6] 目閉じ"),     self.insert_s6),
+                                    (toUTF8("[7] 怒り"),       self.insert_s7),
+                                    (toUTF8("[8] 冷笑"),       self.insert_s8),
+                                    (toUTF8("[20] つくり看板"), self.insert_s20),
+                                    (toUTF8("[25] 歌"),         self.insert_s25)]),
                      ("s",),
-                     ("c", "うにゅう", self.insert_u),
-                     ("m", "表情", [("[10] 素",   self.insert_s10),
-                                    ("[11] 刮目", self.insert_s11),
-                                    ("[19] 歌",   self.insert_s19)]),
+                     ("c", toUTF8("うにゅう"), self.insert_u),
+                     ("m", toUTF8("表情"), [(toUTF8("[10] 素"),   self.insert_s10),
+                                    (toUTF8("[11] 刮目"), self.insert_s11),
+                                    (toUTF8("[19] 歌"),   self.insert_s19)]),
                      ("s",),
-                     ("m", "ウェイト", [("0.1秒", self.insert_w2),
-                                        ("0.2秒", self.insert_w4),
-                                        ("0.3秒", self.insert_w6),
-                                        ("0.4秒", self.insert_w8),
-                                        ("0.5秒", self.insert_w10),
-                                        ("0.6秒", self.insert_w12),
-                                        ("0.8秒", self.insert_w16),
-                                        ("1.0秒", self.insert_w20),
-                                        ("1.2秒", self.insert_w24),
-                                        ("1.5秒", self.insert_w30),
-                                        ("2.0秒", self.insert_w40),
-                                        ("2.5秒", self.insert_w50),
-                                        ("3.0秒", self.insert_w60)]),
-                     ("m", "メタ文字列", [
-                         ("ユーザの呼び名",  self.insert_username),
-                         ("自分の名前 (正)", self.insert_selfname),
-                         ("自分の名前 (誤)", self.insert_selfname2),
-                         ("うにゅうの名前",  self.insert_keroname)]),
+                     ("m", toUTF8("ウェイト"), [(toUTF8("0.1秒"), self.insert_w2),
+                                        (toUTF8("0.2秒"), self.insert_w4),
+                                        (toUTF8("0.3秒"), self.insert_w6),
+                                        (toUTF8("0.4秒"), self.insert_w8),
+                                        (toUTF8("0.5秒"), self.insert_w10),
+                                        (toUTF8("0.6秒"), self.insert_w12),
+                                        (toUTF8("0.8秒"), self.insert_w16),
+                                        (toUTF8("1.0秒"), self.insert_w20),
+                                        (toUTF8("1.2秒"), self.insert_w24),
+                                        (toUTF8("1.5秒"), self.insert_w30),
+                                        (toUTF8("2.0秒"), self.insert_w40),
+                                        (toUTF8("2.5秒"), self.insert_w50),
+                                        (toUTF8("3.0秒"), self.insert_w60)]),
+                     ("m", toUTF8("メタ文字列"), [
+                         (toUTF8("ユーザの呼び名"),  self.insert_username),
+                         (toUTF8("自分の名前 (正)"), self.insert_selfname),
+                         (toUTF8("自分の名前 (誤)"), self.insert_selfname2),
+                         (toUTF8("うにゅうの名前"),  self.insert_keroname)]),
                      ("s",),
-                     ("c", "改行",   self.insert_n),
-                     ("c", "クリア", self.insert_c),
+                     ("c", toUTF8("改行"),   self.insert_n),
+                     ("c", toUTF8("クリア"), self.insert_c),
                      ("c", "URL",    self.insert_url),
-                     ("m", "選択処理", [("選択肢0", self.insert_q0),
-                                        ("選択肢1", self.insert_q1),
-                                        ("選択肢2", self.insert_q2),
-                                        ("選択肢3", self.insert_q3),
-                                        ("選択肢4", self.insert_q4),
-                                        ("選択肢5", self.insert_q5),
-                                        ("選択肢6", self.insert_q6),
-                                        ("選択肢7", self.insert_q7),
-                                        ("選択肢8", self.insert_q8),
-                                        ("選択肢9", self.insert_q9),
-                                        ("開始",    self.insert_z),
-                                        ("開始 (スクロールなし)",
+                     ("m", toUTF8("選択処理"), [(toUTF8("選択肢0"), self.insert_q0),
+                                        (toUTF8("選択肢1"), self.insert_q1),
+                                        (toUTF8("選択肢2"), self.insert_q2),
+                                        (toUTF8("選択肢3"), self.insert_q3),
+                                        (toUTF8("選択肢4"), self.insert_q4),
+                                        (toUTF8("選択肢5"), self.insert_q5),
+                                        (toUTF8("選択肢6"), self.insert_q6),
+                                        (toUTF8("選択肢7"), self.insert_q7),
+                                        (toUTF8("選択肢8"), self.insert_q8),
+                                        (toUTF8("選択肢9"), self.insert_q9),
+                                        (toUTF8("開始"),    self.insert_z),
+                                        (toUTF8("開始 (スクロールなし)"),
                                          self.insert_y)]),
-                     ("c", "終了",       self.insert_e)]:
+                     ("c", toUTF8("終了"),       self.insert_e)]:
             if item[0] == "s":
                 self.command_menu.add_separator()
             elif item[0] == "c":
                 self.command_menu.add_command(label=item[1], command=item[2])
             elif item[0] == "m":
-                submenu = Menu(self.command_menu, tearoff=0)
+                submenu = Menu(self.command_menu, tearoff=0, font=DEFAULT_FONT)
+                self.all_item.append(submenu)
                 self.command_menu.add_cascade(label=item[1], menu=submenu)
                 for label, command in item[2]:
                     submenu.add_command(label=label, command=command)
+        for i in range(len(self.all_item)):
+            try:
+                self.all_item[i].pack(side=LEFT)
+            except TclError:
+                pass
         self.window.bind("<Button-3>", self.popup_command_menu)
         # Sakura Script parser
         self.parser = SakuraScript.Parser()
@@ -335,6 +474,8 @@
             luid = None
         if luid and len(luid) == 82:
             self.client.luid = luid
+        self.sakuraname = ""
+        self.keroname = ""
         # log manager
         self.logger = LogManager(KANJICODE)
         self.log_window = LogWindow(self, self.logger)
@@ -355,11 +496,27 @@
         self.path_helpers = os.path.join(open_bottlecase(), "helpers")
         self.load_helpers()
         # ghost log
+        self.acceptAll = BooleanVar()
+        self.acceptAll.set(1)
         self.local_ghost = None
         self.local_ghost_last_notified = 0
+        self.send_ghost_names()
         # initialize
         self.disable_channel()
         self.edit_clear()
+    def build_font(self):
+        menu, menubutton = self.menubar[4] # Font
+        menu.delete(0, END)
+        menu.add_radiobutton(label="Default", variable=self.target_font,
+                             command=lambda : self.fontmanager.changeFont(self.fontmanager.find_font()))
+        for f in self.fontmanager.fontlist():
+            menu.add_radiobutton(label=f.keys()[0], variable=self.target_font,
+                                 command=self.update_font)
+        self.target_font.set("Default")
+    def update_font(self):
+        for f in self.fontmanager.fontlist():
+            if f.has_key(self.target_font.get()):
+                self.fontmanager.changeFont(f[self.target_font.get()])
     def popup_command_menu(self, event):
         self.command_menu.tk_popup(event.x_root, event.y_root)
     def mainloop(self):
@@ -380,9 +537,10 @@
         if handled:
             self.bottle_icon.show()
         now = time.time()
-        if now - self.local_ghost_last_notified > 600:
+        if now - self.local_ghost_last_notified > 30: # about 30 seconds
             self.local_ghost_last_notified = now
             self.send_ghost_names()
+            self.rebuild_ghostmenu()
         self.window.after(100, self.handle_event) # 0.1s
     def quit(self, event=None):
         self.client.close()
@@ -407,7 +565,7 @@
             except IOError:
                 self.monitor_insert("\nWarning: cannot write " + filename)
                 self.window.bell()
-        channels = ChannelDialog(self.window, self.client.channels).go()
+        channels = ChannelDialog(self, self.window, self.client.channels).go()
         self.monitor_clear()
         if channels is None:
             return
@@ -432,30 +590,50 @@
         menu, menubutton = self.menubar[2] # Channel
         menu.delete(0, END)
         for n in self.client.in_channels:
-            name = self.client.channels[n]["name"]
+            name = toUTF8(self.client.channels[n]["name"])
             if not self.channel.get():
                 self.channel.set(name)
             menu.add_radiobutton(label=name, variable=self.channel,
-                                 command=self.check_channel_permission)
+                                 command=self.rebuild_ghostmenu)
         menu.add_separator()
         menu.add_checkbutton(label="Forward", variable=self.forward)
         menu.add_checkbutton(label="Bell", variable=self.use_bell)
         menubutton.config(state=NORMAL)
+        self.rebuild_ghostmenu()
+        self.log_window.vote_button.config(state=NORMAL)
+        self.log_window.agree_button.config(state=NORMAL)
+        self.show_users()
+    def rebuild_ghostmenu(self):
         # rebuild Ghost menu
+        current = self.target_ghost.get()
         ghosts = [self.DEFAULT_TARGET]
+        ghosts.append(toUTF8(self.sakuraname))
+        name = ""
         for n in range(len(self.client.channels)):
-            name = self.client.channels[n]["ghost"]
+            name = toUTF8(self.client.channels[n]["ghost"])
             if name and name not in ghosts:
                 ghosts.append(name)
         menu, menubutton = self.menubar[3] # Ghost
         menu.delete(0, END)
         for name in ghosts:
-            menu.add_radiobutton(label=name, variable=self.target_ghost)
+            menu.add_radiobutton(label=name, variable=self.target_ghost,
+                                 command=self.update_ghost)
+        if current in ghosts:
+            self.target_ghost.set(current)
+            self.channel_ghost.set("(" + current + ")")
+        else:
+            if current != self.DEFAULT_TARGET and current != name:
+                self.target_ghost.set(toUTF8(self.sakuraname))
+                self.channel_ghost.set("(" + toUTF8(self.sakuraname) + ")")
+            else:
+                self.target_ghost.set(self.DEFAULT_TARGET)
+                self.channel_ghost.set("(" + self.DEFAULT_TARGET + ")")
+        menu.add_separator()
+        menu.add_checkbutton(label="Accept all message", variable=self.acceptAll)
         menubutton.config(state=NORMAL)
-        self.log_window.vote_button.config(state=NORMAL)
-        self.log_window.agree_button.config(state=NORMAL)
         self.check_channel_permission()
-        self.show_users()
+    def update_ghost(self):
+        self.channel_ghost.set("(" + self.target_ghost.get() + ")")
     def disable_channel(self):
         menu, menubutton = self.menubar[2] # Channel
         menubutton.config(state=DISABLED)
@@ -465,12 +643,13 @@
         self.log_window.vote_button.config(state=DISABLED)
         self.log_window.agree_button.config(state=DISABLED)
         self.channel.set("")
+        self.channel_ghost.set("")
         self.target_ghost.set(self.DEFAULT_TARGET)
         self.users.config(text="")
     def get_channel_id(self):
         name = self.channel.get()
         for id in self.client.in_channels:
-            if self.client.channels[id]["name"] == name:
+            if toUTF8(self.client.channels[id]["name"]) == name:
                 return id
         raise RuntimeError, "unknown channel name (%s)" % name
     def show_users(self):
@@ -509,7 +688,7 @@
             else:
                 break
     def assign_helpers(self, event=None):
-        result = HelperDialog(self.window, self.helpers).go()
+        result = HelperDialog(self, self.window, self.helpers).go()
         if result is None:
             return
         self.helpers = result
@@ -541,10 +720,10 @@
         self.editor.delete("sel.first", "sel.last")
     def edit_paste(self, event=None):
         try:
-            data = self.window.selection_get(selection="CLIPBOARD")
+            data = toUTF8(self.window.selection_get(selection="CLIPBOARD"))
         except TclError:
             return
-        self.editor.insert("insert", data)
+        self.editor.insert("insert", toUTF8(toEUC(data)))
     def edit_clear(self, event=None):
         self.edit_clear_all()
         self.editor.insert(END, r"\t\h\s[0]")
@@ -630,20 +809,20 @@
     def send(self, event=None):
         if self.check():
             return
-        d = Dialog(title="Bottler: Send", text="送信しますか?",
+        d = Dialog(title="Bottler: Send", text=toUTF8("送信しますか?"),
                    bitmap="question", strings=("OK", "Cancel"), default=0)
         if d.num:
             return
         channel = self.get_channel_id()
         script = self.get_script()
-        ghost = self.target_ghost.get()
+        ghost = unicode(self.target_ghost.get(), "utf-8").encode("euc-jp")
         if ghost == self.DEFAULT_TARGET:
             ghost = None
         self.monitor_clear()
         self.monitor_insert("Broadcasting...")
         self.window.update()
         try:
-            if self.client.send_broadcast(channel, script, ghost):
+            if self.client.send_broadcast(channel, toEUC(script), ghost):
                 error = self.client.headers["ExtraMessage"]
             else:
                 error = None
@@ -651,7 +830,7 @@
             error = str(e)
         if error is not None:
             self.monitor_insert("failed!!\nError: ")
-            self.monitor_insert(error)
+            self.monitor_insert(toUTF8(error))
             self.window.bell()
         else:
             self.monitor_insert("done.\nUsers: ")
@@ -701,7 +880,7 @@
         "Charset: Shift_JIS\r\n"
         "\r\n")
     def send_local_message(self, script):
-        self.client.send_sstp_message(self.SSTP_SEND % self.to_sjis(script),
+        self.client.send_sstp_message(self.SSTP_SEND % self.to_sjis(toEUC(script)),
                                       self.host, self.port)
     def vote_message(self, mid, type):
         self.monitor_clear()
@@ -733,7 +912,14 @@
         pos = string.find(data, "\r\n\r\n")
         if pos < 0:
             return
-        name = self.sjis_to(string.strip(data[pos:]))
+
+        resdata = data[pos:]
+        try:
+            resdata = unicode(resdata, "utf8").encode("sjis")
+        except UnicodeError:
+            pass
+
+        name = self.sjis_to(string.strip(resdata))
         if not name or self.local_ghost == name:
             return
         try:
@@ -741,6 +927,11 @@
         except BottleClientError, e:
             return
         self.local_ghost = name
+        try:
+            self.local_ghost = unicode(self.local_ghost, "utf8").encode("euc-jp")
+        except UnicodeError:
+            pass
+        [self.sakuraname, self.keroname] = self.local_ghost.split("\n")[0].split(",")
     def monitor_clear(self):
         self.monitor.config(state=NORMAL)
         self.monitor.delete("1.0", END)
@@ -878,7 +1069,7 @@
             nchannels = int(file.readline())
             for n in range(nchannels):
                 channel, alias = string.split(file.readline())
-                self.aliases[channel] = alias
+                self.aliases[unicode(channel, 'euc-jp')] = alias
             while 1:
                 line = file.readline()
                 if not line:
@@ -903,7 +1094,7 @@
         else:
             file.write("%d\n" % len(self.channels))
             for channel, alias in self.aliases.items():
-                file.write("%s %s\n" % (channel, alias))
+                file.write("%s %s\n" % (toEUC(channel), alias))
             for mid, dict in self.votes.items():
                 v = dict.get(VOTE,  0)
                 a = dict.get(AGREE, 0)
@@ -918,6 +1109,7 @@
         if self.disabled:
             return
         # register an alias to channel if necessary
+        channel = unicode(channel, 'euc-jp')
         if channel not in self.channels:
             self.channels.append(channel)
             self.channels.sort()
@@ -927,7 +1119,7 @@
         datetime = time.strftime("%Y%m%d%H%M%S", now)
         filename = "%s-%s.log" % (datetime[:8], self.aliases[channel])
         file = open(os.path.join(self.logdir, filename), "a")
-        file.write("%s\t%s\t%s\t%s\n" % (datetime, mid, channel,
+        file.write("%s\t%s\t%s\t%s\n" % (datetime, mid, toEUC(channel),
                                          self.han2zen(script)))
         file.close()
     def log_votes(self, mid, type, num):
@@ -1060,7 +1252,9 @@
         return self.log[index][5]
 
 class DateRangeDialog(Toplevel):
-    def __init__(self, master):
+    DEFAULT_FONT = None
+    def __init__(self, app, master):
+        DEFAULT_FONT = app.fontmanager.find_font()
         Toplevel.__init__(self, master)
         self.transient(master)
         self.title("Bottler: Select Dates")
@@ -1069,36 +1263,47 @@
         self.protocol('WM_DELETE_WINDOW', self.cancel)
         frame = Frame(self)
         frame.pack(side=BOTTOM, fill=X)
-        Button(frame, text="OK", command=self.ok).pack(side=LEFT)
-        Button(frame, text="Cancel", command=self.cancel).pack(side=RIGHT)
+        ba = Button(frame, text="OK", command=self.ok, font=DEFAULT_FONT)
+        ba.pack(side=LEFT)
+        bb = Button(frame, text="Cancel", command=self.cancel, font=DEFAULT_FONT)
+        bb.pack(side=RIGHT)
         frame = Frame(self)
         frame.pack(side=BOTTOM, fill=X, padx=2, pady=2)
         y1, m1, d1 = time.localtime(master.range_start or time.time())[0:3]
         y2, m2, d2 = time.localtime(master.range_end   or time.time())[0:3]
-        self.y1 = Entry(frame, width=5)
+        self.y1 = Entry(frame, width=5, font=DEFAULT_FONT)
         self.y1.insert(END, str(y1))
         self.y1.pack(side=LEFT)
-        Label(frame, text="年").pack(side=LEFT)
-        self.m1 = Entry(frame, width=3)
+        la = Label(frame, text=toUTF8("年"), font=DEFAULT_FONT)
+        la.pack(side=LEFT)
+        self.m1 = Entry(frame, width=3, font=DEFAULT_FONT)
         self.m1.insert(END, str(m1))
         self.m1.pack(side=LEFT)
-        Label(frame, text="月").pack(side=LEFT)
-        self.d1 = Entry(frame, width=3)
+        lb = Label(frame, text=toUTF8("月"), font=DEFAULT_FONT)
+        lb.pack(side=LEFT)
+        self.d1 = Entry(frame, width=3, font=DEFAULT_FONT)
         self.d1.insert(END, str(d1))
         self.d1.pack(side=LEFT)
-        Label(frame, text="日〜").pack(side=LEFT)
-        self.y2 = Entry(frame, width=5)
+        lc = Label(frame, text=toUTF8("日〜"), font=DEFAULT_FONT)
+        lc.pack(side=LEFT)
+        self.y2 = Entry(frame, width=5, font=DEFAULT_FONT)
         self.y2.insert(END, str(y2))
         self.y2.pack(side=LEFT)
-        Label(frame, text="年").pack(side=LEFT)
-        self.m2 = Entry(frame, width=3)
+        ld = Label(frame, text=toUTF8("年"), font=DEFAULT_FONT)
+        ld.pack(side=LEFT)
+        self.m2 = Entry(frame, width=3, font=DEFAULT_FONT)
         self.m2.insert(END, str(m2))
         self.m2.pack(side=LEFT)
-        Label(frame, text="月").pack(side=LEFT)
-        self.d2 = Entry(frame, width=3)
+        le = Label(frame, text=toUTF8("月"), font=DEFAULT_FONT)
+        le.pack(side=LEFT)
+        self.d2 = Entry(frame, width=3, font=DEFAULT_FONT)
         self.d2.insert(END, str(d2))
         self.d2.pack(side=LEFT)
-        Label(frame, text="日").pack(side=LEFT)
+        lf = Label(frame, text=toUTF8("日"), font=DEFAULT_FONT)
+        lf.pack(side=LEFT)
+#        for tmp in [ba, bb, la, lb, lc, ld, le, lf,
+#                    self.y1, self.y2, self.m1, self.m2, self.d1, self.d2]:
+#            app.all_item.append(tmp)
     def go(self):
         try:
             self.grab_set()
@@ -1130,64 +1335,74 @@
                 self.quit()
                 return
         Dialog(title="Bottler: Invalid Dates",
-               text="日付の範囲が不正です。\n入力し直して下さい。",
+               text=toUTF8("日付の範囲が不正です。\n入力し直して下さい。"),
                bitmap="error", strings=("OK",), default=0)
     def cancel(self, event=None):
         self.selection = None
         self.quit()
 
 class LogWindow(SubWindow):
+    DEFAULT_FONT = None
     def __init__(self, app, logger):
         self.app = app
         self.logger = logger
         # create GUI
+        DEFAULT_FONT = app.fontmanager.find_font()
         SubWindow.__init__(self, self.app.window)
         self.title("Bottler: Logs")
         menubar = Frame(self, relief=RAISED, border=2)
         menubar.pack(side=TOP, fill=X)
         buttonbar = Frame(self)
         buttonbar.pack(side=TOP, fill=X)
-        self.play_button = Button(buttonbar, text="Play", command=self.play)
+        self.play_button = Button(buttonbar, text="Play", command=self.play, font=DEFAULT_FONT)
         self.play_button.pack(side=LEFT)
-        self.vote_button = Button(buttonbar, text="Vote", command=self.vote)
+        self.vote_button = Button(buttonbar, text="Vote", command=self.vote, font=DEFAULT_FONT)
         self.vote_button.pack(side=LEFT)
-        self.agree_button = Button(buttonbar, text="Agree", command=self.agree)
+        self.agree_button = Button(buttonbar, text="Agree", command=self.agree, font=DEFAULT_FONT)
         self.agree_button.pack(side=LEFT)
-        Label(buttonbar, text="Channel:").pack(side=LEFT)
-        self.channel = Label(buttonbar)
+        la = Label(buttonbar, text="Channel:", font=DEFAULT_FONT)
+        la.pack(side=LEFT)
+        self.channel = Label(buttonbar, font=DEFAULT_FONT)
         self.channel.pack(side=LEFT)
-        Label(buttonbar, text="Range:").pack(side=LEFT)
-        self.range = Label(buttonbar)
+        lb = Label(buttonbar, text="Range:", font=DEFAULT_FONT)
+        lb.pack(side=LEFT)
+        self.range = Label(buttonbar, font=DEFAULT_FONT)
         self.range.pack(side=LEFT)
-        Label(buttonbar, text="Order:").pack(side=LEFT)
-        self.order = Label(buttonbar)
+        lc = Label(buttonbar, text="Order:", font=DEFAULT_FONT)
+        lc.pack(side=LEFT)
+        self.order = Label(buttonbar, font=DEFAULT_FONT)
         self.order.pack(side=LEFT)
-        frame, self.viewer = ScrolledText(self, height=8)
+        self.auto_var = BooleanVar()
+        frame, self.viewer = ScrolledText(self, height=8, font=DEFAULT_FONT)
         frame.pack(side=BOTTOM, fill=X)
         frame, self.listbox = ScrolledListbox(self, height=12)
         frame.pack(side=BOTTOM, fill=BOTH, expand=1)
+        for tmp in [la, lb, lc, self.play_button, self.vote_button, self.agree_button,
+                    self.channel, self.range, self.order, self.viewer, self.listbox]:
+            app.all_item.append(tmp)
         self.viewer.config(state=DISABLED)
-        self.listbox.config(font="fixed") # XXX
+        self.listbox.config(font=DEFAULT_FONT) # XXX
         self.listbox.config(selectmode=SINGLE)
         self.listbox.bind("<ButtonRelease-1>", self.show_script)
         # menus
         self.labels = {
-            LogManager.ALL_CHANNELS:      "すべて",
-            LogManager.RANGE_TODAY:       "今日",
-            LogManager.RANGE_YESTERDAY:   "昨日",
-            LogManager.RANGE_LAST3DAYS:   "過去三日間",
-            LogManager.RANGE_LAST7DAYS:   "過去一週間",
-            LogManager.RANGE_SPECIFIED:   "指定期間",
-            LogManager.RANGE_ALL:         "すべて",
-            LogManager.ORDER_BY_NEWNESS:  "新着順",
-            LogManager.ORDER_BY_DATETIME: "日付順",
-            LogManager.ORDER_BY_VOTES:    "得票順",
+            LogManager.ALL_CHANNELS:      toUTF8("すべて"),
+            LogManager.RANGE_TODAY:       toUTF8("今日"),
+            LogManager.RANGE_YESTERDAY:   toUTF8("昨日"),
+            LogManager.RANGE_LAST3DAYS:   toUTF8("過去三日間"),
+            LogManager.RANGE_LAST7DAYS:   toUTF8("過去一週間"),
+            LogManager.RANGE_SPECIFIED:   toUTF8("指定期間"),
+            LogManager.RANGE_ALL:         toUTF8("すべて"),
+            LogManager.ORDER_BY_NEWNESS:  toUTF8("新着順"),
+            LogManager.ORDER_BY_DATETIME: toUTF8("日付順"),
+            LogManager.ORDER_BY_VOTES:    toUTF8("得票順"),
             }
         self.view = []
         for text, itemlist in [
             ("File", [("c", "Close",     self.close)]),
             ("Edit", [("c", "Copy",      self.edit_copy)]),
             ("View", [("c", "Update",    self.update_view),
+                      ("cb", "Auto Update", self.auto_var, 1),
                       ("s",),
                       ("m", "Range",   "i", [
                           LogManager.RANGE_TODAY,
@@ -1203,17 +1418,23 @@
                           LogManager.ORDER_BY_DATETIME,
                           LogManager.ORDER_BY_VOTES])]),
             ("Help", [("c", "About...",  self.app.about)])]:
-            menubutton = Menubutton(menubar, text=text)
+            menubutton = Menubutton(menubar, text=text, font=DEFAULT_FONT)
+            app.all_item.append(menubutton)
             menubutton.pack(side=LEFT)
-            menu = Menu(menubutton, tearoff=0)
+            menu = Menu(menubutton, tearoff=0, font=DEFAULT_FONT)
+            app.all_item.append(menu)
             menubutton.config(menu=menu)
             for item in itemlist:
                 if item[0] == "c":
                     menu.add_command(label=item[1], command=item[2])
                 elif item[0] == "s":
                     menu.add_separator()
+                elif item[0] == "cb":
+                    item[2].set(item[3])
+                    menu.add_checkbutton(label=item[1], variable=item[2])
                 elif item[0] == "m":
-                    submenu = Menu(menu, tearoff=0)
+                    submenu = Menu(menu, tearoff=0, font=DEFAULT_FONT)
+                    app.all_item.append(submenu)
                     menu.add_cascade(label=item[1], menu=submenu)
                     if item[2] == "s":
                         variable = StringVar(self)
@@ -1235,14 +1456,14 @@
     def update_view(self, from_menu=1):
         # update labels
         selected_range   = self.view[0][1].get()
-        selected_channel = self.view[1][1].get()
+        selected_channel = unicode(self.view[1][1].get(), 'utf8')
         selected_order   = self.view[2][1].get()
         range_changed = (selected_channel == self.logger.get_channel() and
                          selected_order   == self.logger.get_order())
         if selected_range != LogManager.RANGE_SPECIFIED:
             self.range_start = self.range_end = None
         elif from_menu and range_changed:
-            selection = DateRangeDialog(self).go()
+            selection = DateRangeDialog(self.app, self).go()
             if selection is None:
                 submenu, variable = self.view[0] # Range
                 variable.set(self.logger.get_range())
@@ -1276,7 +1497,7 @@
             return
         loglist = self.logger.get_formatted_logs()
         for log in loglist:
-            self.listbox.insert(END, log)
+            self.listbox.insert(END, toUTF8(log))
         # show number of logs
         self.viewer.config(state=NORMAL)
         self.viewer.delete("1.0", END)
@@ -1285,7 +1506,7 @@
         # update channel menu
         submenu, variable = self.view[1] # Channel
         submenu.delete(0, END)
-        submenu.add_radiobutton(label="すべて", value=LogManager.ALL_CHANNELS,
+        submenu.add_radiobutton(label=toUTF8("すべて"), value=LogManager.ALL_CHANNELS,
                                 variable=variable,
                                 command=self.update_view)
         for channel in self.logger.get_selected_channels():
@@ -1299,18 +1520,18 @@
             return
         self.viewer.config(state=NORMAL)
         self.viewer.delete("1.0", END)
-        self.viewer.insert(END, script)
+        self.viewer.insert(END, toUTF8(script))
         self.viewer.config(state=DISABLED)
     def play(self, event=None):
         script = self.logger.get_script(self.listbox.index("anchor"))
         if script is None:
             return
-        self.app.send_local_message(script)
+        self.app.send_local_message(unicode(script, "euc-jp"))
     def vote(self, event=None):
         mid = self.logger.get_mid(self.listbox.index("anchor"))
         if mid is None:
             return
-        d = Dialog(title="Bottler: Vote", text="投票しますか?",
+        d = Dialog(title="Bottler: Vote", text=toUTF8("投票しますか?"),
                    bitmap="question", strings=("OK", "Cancel"), default=0)
         if d.num:
             return
@@ -1319,7 +1540,7 @@
         mid = self.logger.get_mid(self.listbox.index("anchor"))
         if mid is None:
             return
-        d = Dialog(title="Bottler: Agree", text="同意しますか?",
+        d = Dialog(title="Bottler: Agree", text=toUTF8("同意しますか?"),
                    bitmap="question", strings=("OK", "Cancel"), default=0)
         if d.num:
             return
@@ -1348,7 +1569,7 @@
         except IOError:
             return
         while 1:
-            line = file.readline()
+            line = toUTF8(file.readline())
             if not line:
                 break
             elif line[0] == "#":
@@ -1368,6 +1589,12 @@
         file.write("# This is an auto-generated file.\n")
         file.write("# Don't edit this file while running bottler.py!\n")
         for line in self.phrases:
+            try:
+                line = unicode(line, "utf8")
+            except TypeError:
+                pass
+            if type(line) == UnicodeType:
+                line = toEUC(line)
             file.write(line + "\n")
         file.close()
     def close(self):
@@ -1426,10 +1653,12 @@
 """
 
 class PhraseWindow(SubWindow):
+    DEFAULT_FONT = None
     def __init__(self, app, manager):
         self.app = app
         self.manager = manager
         # create GUI
+        DEFAULT_FONT = app.fontmanager.find_font()
         SubWindow.__init__(self, self.app.window)
         self.title("Bottler: Phrases")
         menubar = Frame(self, relief=RAISED, border=2)
@@ -1440,24 +1669,34 @@
         frame.pack(side=RIGHT)
         self.image1 = BitmapImage(data=CURSOR_UP)
         self.image2 = BitmapImage(data=CURSOR_DOWN)
-        Button(frame, image=self.image1, command=self.move_up).pack(side=TOP)
-        Button(frame, image=self.image2, command=self.move_down).pack(side=TOP)
+        ba = Button(frame, image=self.image1, command=self.move_up, font=DEFAULT_FONT)
+        ba.pack(side=TOP)
+        bb = Button(frame, image=self.image2, command=self.move_down, font=DEFAULT_FONT)
+        bb.pack(side=TOP)
         frame = Frame(toolbar)
         frame.pack(side=LEFT, fill=X, expand=1)
         self.editor = Entry(frame)
-        self.editor.config(font="fixed") # XXX
+        app.all_item.append(self.editor)
+        self.editor.config(font=DEFAULT_FONT) # XXX
         self.editor.pack(side=TOP, fill=X, expand=1)
         self.editor.bind("<Return>", self.add)
         self.editor.focus_set()
-        Button(frame, text="Clear", command=self.clear).pack(side=LEFT)
-        Button(frame, text="Add", command=self.add).pack(side=LEFT)
-        Button(frame, text="Modify", command=self.modify).pack(side=LEFT)
-        Button(frame, text="Delete", command=self.delete).pack(side=LEFT)
+        bc = Button(frame, text="Clear", command=self.clear, font=DEFAULT_FONT)
+        bc.pack(side=LEFT)
+        bd = Button(frame, text="Add", command=self.add, font=DEFAULT_FONT)
+        bd.pack(side=LEFT)
+        be = Button(frame, text="Modify", command=self.modify, font=DEFAULT_FONT)
+        be.pack(side=LEFT)
+        bf = Button(frame, text="Delete", command=self.delete, font=DEFAULT_FONT)
+        bf.pack(side=LEFT)
         frame, self.listbox = ScrolledListbox(self, width=40, height=20)
+        app.all_item.append(self.listbox)
         frame.pack(side=TOP, fill=BOTH, expand=1)
-        self.listbox.config(font="fixed") # XXX
+        self.listbox.config(font=DEFAULT_FONT) # XXX
         self.listbox.bind("<ButtonRelease-1>", self.selected)
         self.listbox.bind("<Double-Button-1>", self.insert)
+        for tmp in [ba, bb, bc, bd, be, bf]:
+            app.all_item.append(tmp)
         # menus
         for text, itemlist in [
             ("File", [("c", "Close",     self.close)]),
@@ -1465,9 +1704,11 @@
                       ("c", "Copy",      self.edit_copy),
                       ("c", "Paste",     self.edit_paste)]),
             ("Help", [("c", "About...",  self.app.about)])]:
-            menubutton = Menubutton(menubar, text=text)
+            menubutton = Menubutton(menubar, text=text, font=DEFAULT_FONT)
+            app.all_item.append(menubutton)
             menubutton.pack(side=LEFT)
-            menu = Menu(menubutton, tearoff=0)
+            menu = Menu(menubutton, tearoff=0, font=DEFAULT_FONT)
+            app.all_item.append(menu)
             menubutton.config(menu=menu)
             for item in itemlist:
                 if item[0] == "c":
@@ -1494,7 +1735,7 @@
             data = self.selection_get(selection="CLIPBOARD")
         except TclError:
             return
-        self.editor.insert("insert", data)
+        self.editor.insert("insert", toUTF8(toEUC(data)))
     def selected(self, event=None):
         selection = self.listbox.curselection()
         if not selection:
@@ -1566,32 +1807,40 @@
         self.listbox.selection_set(index-1)
 
 class HelperDialog(Toplevel):
-    def __init__(self, master, helpers):
+    DEFAULT_FONT = None
+    def __init__(self, app, master, helpers):
+        DEFAULT_FONT = app.fontmanager.find_font()
         Toplevel.__init__(self, master)
         self.transient(master)
         self.title("Bottler: Helpers")
         self.bind("<Return>", self.ok)
         self.bind("<Escape>", self.cancel)
         self.protocol('WM_DELETE_WINDOW', self.cancel)
-        label = Label(self, text="Channel")
+        label = Label(self, text="Channel", font=DEFAULT_FONT)
+#        app.all_item.append(label)
         label.grid_configure(column=0, row=0, sticky=W)
-        label = Label(self, text="Command")
+        label = Label(self, text="Command", font=DEFAULT_FONT)
+#        app.all_item.append(label)
         label.grid_configure(column=1, row=0, sticky=W)
         self.helpers = []
         for i in range(10):
             pattern = Entry(self, width=15)
-            pattern.config(font="fixed") # XXX
+#            app.all_item.append(pattern)
+            pattern.config(font=DEFAULT_FONT) # XXX
             pattern.grid_configure(column=0, row=i+1, sticky=EW)
             command = Entry(self, width=65)
-            command.config(font="fixed") # XXX
+#            app.all_item.append(command)
+            command.config(font=DEFAULT_FONT) # XXX
             command.grid_configure(column=1, row=i+1, sticky=EW)
             if i < len(helpers):
                 pattern.insert(0, helpers[i][0])
                 command.insert(0, helpers[i][1])
             self.helpers.append((pattern, command))
-        button = Button(self, text="OK", command=self.ok)
+        button = Button(self, text="OK", command=self.ok, font=DEFAULT_FONT)
+#        app.all_item.append(button)
         button.grid_configure(column=0, row=11, sticky=W)
-        button = Button(self, text="Cancel", command=self.cancel)
+        button = Button(self, text="Cancel", command=self.cancel, font=DEFAULT_FONT)
+#        app.all_item.append(button)
         button.grid_configure(column=1, row=11, sticky=E)
     def go(self):
         try:
