diff -ru unzip-5.52-orig/crypt.c unzip-5.52/crypt.c
--- unzip-5.52-orig/crypt.c	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/crypt.c	2006-11-17 15:02:50.000000000 +0900
@@ -156,10 +156,74 @@
     GLOBAL(keys[0]) = 305419896L;
     GLOBAL(keys[1]) = 591751049L;
     GLOBAL(keys[2]) = 878082192L;
+#ifdef _MBCS
+    char *buf, *bufp, *inbufp;
+    size_t inlen, outlen, size, inleft, outleft;
+    int i, updated = 0;
+    iconv_t cd;
+    static int mode = -1;
+    static char *locale_charset = NULL;
+
+    if (mode == -1) {
+      const char *ctype = setlocale(LC_CTYPE, "");
+      size_t ctype_len = 0;
+      if ( ctype != NULL ) ctype_len = strlen(ctype);
+
+      if ( (ctype_len >= 5 ) && (strncmp(ctype + ctype_len -5, "UTF-8", 5) == 0) ) {
+        mode = 1;
+        locale_charset = "UTF-8";
+      } else if ( ( (ctype_len >= 6 ) && (strncmp(ctype + ctype_len - 6, "EUC-JP", 6) == 0) ) ||
+                  ( (ctype_len >= 5 ) && (strncmp(ctype + ctype_len - 5, "eucJP",  5) == 0) ) ||
+                  ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "ujis",   4) == 0) ) ) {
+        mode = 2;
+        locale_charset = "EUC-JP";
+/*
+      } else if ( ( (ctype_len >= 9 ) && (strncmp(ctype + ctype_len - 9, "Shift_JIS", 9) == 0) ) ||
+                  ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "SJIS",      4) == 0) ) ||
+                  ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "sjis",      4) == 0) ) ) {
+        mode = 3;
+        locale_charset = "CP932";
+*/
+      } else {
+        mode = 0;
+      }
+    }
+
+    if ( (mode > 0) && (locale_charset != NULL) ) {
+      inlen = strlen(passwd);
+      size = inlen * 6;
+      buf = malloc(size);
+      inleft = inlen;
+      outleft = size;
+      inbufp = passwd;
+      bufp = buf;
+      cd = iconv_open("CP932", locale_charset);
+      if (cd != (iconv_t)-1) {
+        iconv(cd, &inbufp, &inleft, &bufp, &outleft);
+        iconv_close(cd);
+        if (inleft == 0) {
+	  outlen = size - outleft;
+	  for(i=0; i<outlen; i++) {
+	    update_keys(__G__ (int)*(buf+i));
+	  }
+	  updated = 1;
+	}
+      }
+      free(buf);
+    }
+
+    if ( updated <= 0 ) {
+      while (*passwd != '\0') {
+        update_keys(__G__ (int)*passwd);
+        passwd++;
+      }
+    }
+#else
     while (*passwd != '\0') {
         update_keys(__G__ (int)*passwd);
         passwd++;
     }
+#endif
 }
 
 
diff -ru unzip-5.52-orig/crypt.h unzip-5.52/crypt.h
--- unzip-5.52-orig/crypt.h	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/crypt.h	2006-11-17 15:02:50.000000000 +0900
@@ -171,5 +171,9 @@
 
 #define zfwrite  fwrite
 
+#ifdef _MBCS
+#include <iconv.h>
+#endif
+
 #endif /* ?CRYPT */
 #endif /* !__crypt_h */
diff -ru unzip-5.52-orig/fileio.c unzip-5.52/fileio.c
--- unzip-5.52-orig/fileio.c	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/fileio.c	2006-11-17 15:02:50.000000000 +0900
@@ -2059,9 +2059,14 @@
                 /* translate the text coded in the entry's host-dependent
                    "extended ASCII" charset into the compiler's (system's)
                    internal text code page */
+#ifdef _MBCS
+	      if (G.pInfo->hostnum != UNIX_ )
+		buf_to_locale(G.outbuf);
+#else
                 Ext_ASCII_TO_Native((char *)G.outbuf, G.pInfo->hostnum,
                                     G.pInfo->hostver, G.pInfo->HasUxAtt,
                                     FALSE);
+#endif
 #ifdef WINDLL
                 /* translate to ANSI (RTL internal codepage may be OEM) */
                 INTERN_TO_ISO((char *)G.outbuf, (char *)G.outbuf);
@@ -2073,7 +2078,12 @@
 #endif /* (WIN32 && !_WIN32_WCE) */
 #endif /* ?WINDLL */
             } else {
+#ifdef _MBCS
+	      if (G.pInfo->hostnum != UNIX_ )
+		buf_to_locale(G.outbuf);
+#else
                 A_TO_N(G.outbuf);   /* translate string to native */
+#endif
             }
 
 #ifdef WINDLL
@@ -2139,10 +2149,15 @@
             return PK_EOF;
         G.filename[length] = '\0';      /* terminate w/zero:  ASCIIZ */
 
+#ifdef _MBCS
+	if (G.pInfo->hostnum != UNIX_ )
+	  buf_to_locale(G.filename);
+#else
         /* translate the Zip entry filename coded in host-dependent "extended
            ASCII" into the compiler's (system's) internal text code page */
         Ext_ASCII_TO_Native(G.filename, G.pInfo->hostnum, G.pInfo->hostver,
                             G.pInfo->HasUxAtt, (option == DS_FN_L));
+#endif
 
         if (G.pInfo->lcflag)      /* replace with lowercase filename */
             STRLOWER(G.filename, G.filename);
@@ -2472,6 +2487,83 @@
     return (char *)oldptr;
 }
 
+void buf_to_locale(char *ptr)
+{
+  char *buf, *bufp, *inbufp;
+  size_t inlen, outlen, size, inleft, outleft;
+  int i;
+  iconv_t cd;
+  static int mode = -1;
+  static char *locale_charset = NULL;
+  static const char* charsets[] = {
+    "UTF-8",
+    "CP932",
+    "EUC-JP",
+    "ISO-2022-JP",
+    NULL
+  };
+
+  if (mode == 0) return;
+
+  if (mode == -1) {
+    const char *ctype = setlocale(LC_CTYPE, "");
+    if ( ctype == NULL ) {
+      mode = 0;
+      return;
+    }
+    size_t ctype_len = strlen(ctype);
+
+    if ( (ctype_len >= 5 ) && (strncmp(ctype + ctype_len -5, "UTF-8", 5) == 0) ) {
+      mode = 1;
+      locale_charset = "UTF-8";
+    } else if ( ( (ctype_len >= 6 ) && (strncmp(ctype + ctype_len - 6, "EUC-JP", 6) == 0) ) ||
+                ( (ctype_len >= 5 ) && (strncmp(ctype + ctype_len - 5, "eucJP",  5) == 0) ) ||
+                ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "ujis",   4) == 0) ) ) {
+      mode = 2;
+      locale_charset = "EUC-JP";
+    } else if ( ( (ctype_len >= 9 ) && (strncmp(ctype + ctype_len - 9, "Shift_JIS", 9) == 0) ) ||
+                ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "SJIS",      4) == 0) ) ||
+                ( (ctype_len >= 4 ) && (strncmp(ctype + ctype_len - 4, "sjis",      4) == 0) ) ) {
+      mode = 3;
+      locale_charset = "CP932";
+    } else {
+      mode = 0;
+      return;
+    }
+  }
+  if (locale_charset == NULL) return;
+
+  inlen = strlen(ptr);
+  size = inlen * 6;
+  buf = malloc(size);
+
+  for (i=0; charsets[i]; i++) {
+    inleft = inlen;
+    outleft = size;
+    inbufp = ptr;
+    bufp = buf;
+    if (strcmp(locale_charset, charsets[i]) == 0) continue;
+    cd = iconv_open(locale_charset, charsets[i]);
+    if (cd == (iconv_t)-1) continue;
+    iconv(cd, &inbufp, &inleft, &bufp, &outleft);
+    iconv_close(cd);
+    if (inleft != 0) continue;
+    outlen = size - outleft;
+    memcpy(ptr, buf, outlen);
+    ptr[outlen] = '\0';
+    break;
+  }
+
+  free(buf);
+}
+
+int uzmblen(ZCONST unsigned char *ptr) {
+  int i;
+  i = mblen((const char*) ptr, MB_CUR_MAX);
+  if (i >= 0) return i;
+  /* fprintf(stderr, " uzmblen: multi byte strings error (%02x)\n", *ptr); */
+  return 1;
+}
 
 #ifdef NEED_UZMBSCHR
 /***********************/
Only in unzip-5.52/: fileio.c.orig
diff -ru unzip-5.52-orig/unix/Makefile unzip-5.52/unix/Makefile
--- unzip-5.52-orig/unix/Makefile	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/unix/Makefile	2006-11-17 15:04:32.000000000 +0900
@@ -40,6 +40,7 @@
 
 # Defaults most systems use (use LOCAL_UNZIP in environment to add flags,
 # such as -DDOSWILD).
+LOCAL_UNZIP= -D_MBCS
 
 # UnZip flags
 CC = cc#	try using "gcc" target rather than changing this (CC and LD
diff -ru unzip-5.52-orig/unix/unix.c unzip-5.52/unix/unix.c
--- unzip-5.52-orig/unix/unix.c	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/unix/unix.c	2006-11-17 15:02:50.000000000 +0900
@@ -196,7 +196,7 @@
         }
 
         /* break the wildspec into a directory part and a wildcard filename */
-        if ((G.wildname = (ZCONST char *)strrchr(wildspec, '/')) == NULL) {
+        if ((G.wildname = (ZCONST char *)MBSRCHR(wildspec, '/')) == NULL) {
             G.dirname = ".";
             G.dirnamelen = 1;
             G.have_dirname = FALSE;
@@ -508,7 +508,7 @@
     *pathcomp = '\0';           /* initialize translation buffer */
     pp = pathcomp;              /* point to translation buffer */
     if (uO.jflag)               /* junking directories */
-        cp = (char *)strrchr(G.filename, '/');
+        cp = (char *)MBSRCHR(G.filename, '/');
     if (cp == (char *)NULL)     /* no '/' or not junking dirs */
         cp = G.filename;        /* point to internal zipfile-member pathname */
     else
diff -ru unzip-5.52-orig/unzpriv.h unzip-5.52/unzpriv.h
--- unzip-5.52-orig/unzpriv.h	2006-11-17 14:52:58.000000000 +0900
+++ unzip-5.52/unzpriv.h	2006-11-17 15:02:50.000000000 +0900
@@ -1167,7 +1167,10 @@
    /* Multi Byte Character Set */
 #  define ___MBS_TMP_DEF  char *___tmp_ptr;
 #  define ___TMP_PTR      ___tmp_ptr
-#  define CLEN(ptr) mblen((ZCONST char *)(ptr), MB_CUR_MAX)
+/* #  define CLEN(ptr) mblen((ZCONST char *)(ptr), MB_CUR_MAX) */
+#  define CLEN(ptr) uzmblen((ZCONST unsigned char *)(ptr))
+#  include <iconv.h>
+   void buf_to_locale(char *ptr);
 #  ifndef PREINCSTR
 #    define PREINCSTR(ptr) (ptr += CLEN(ptr))
 #  endif
Only in unzip-5.52/: unzpriv.h.orig
